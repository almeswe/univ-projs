using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace TestsGenerator.Core.Roslyn
{
    public static class TestsGeneratorAssertExtensions
    {
        public static StatementSyntax MakeAssertFail(this TestsGenerator writer)
        {
            var expressionArguments = SyntaxFactory.ArgumentList(
                SyntaxFactory.SingletonSeparatedList(SyntaxFactory.Argument(
                    SyntaxFactory.LiteralExpression(SyntaxKind.StringLiteralExpression,
                        SyntaxFactory.Literal("autogenerated")))));
            var expression = SyntaxFactory.InvocationExpression(
                SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression,
                    SyntaxFactory.IdentifierName("Assert"),
                    SyntaxFactory.IdentifierName("Fail")),
                    expressionArguments)
                .WithLeadingTrivia(SyntaxFactory.Whitespace("\t\t\t"));
            return SyntaxFactory.ExpressionStatement(expression)
                .WithTrailingTrivia(SyntaxFactory.EndOfLine("\r\n"));
        }

        public static StatementSyntax MakeAssertAreEqual(this TestsGenerator writer,
            ExpressionSyntax leftExpression, ExpressionSyntax rightExpression)
        {
            var expressionArguments = SyntaxFactory.ArgumentList();
            expressionArguments = expressionArguments.AddArguments(
                SyntaxFactory.Argument(leftExpression));
            expressionArguments = expressionArguments.AddArguments(
                SyntaxFactory.Argument(rightExpression));
            var expression = SyntaxFactory.InvocationExpression(
                SyntaxFactory.MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression,
                    SyntaxFactory.IdentifierName("Assert"),
                    SyntaxFactory.IdentifierName("AreEqual")),
                    expressionArguments)
                .WithLeadingTrivia(SyntaxFactory.Whitespace("\t\t\t"));
            return SyntaxFactory.ExpressionStatement(expression)
                .WithTrailingTrivia(SyntaxFactory.EndOfLine("\r\n"));
        }
    }
}
